#!/usr/bin/env python2

from compiler import manifest as mf

import subprocess
import distutils
import argparse
import shutil
import re
import sys
import os

from os import path
from StringIO import StringIO
from distutils import dir_util

parser = argparse.ArgumentParser('qmlcore build tool')
parser.add_argument('--minify', '-m', action='store_true', default=False, help='force minify step')
parser.add_argument('--devel', '-d', action='store_true', default=False, help='development mode, listen for changed files, rebuild if changed')
parser.add_argument('--keep-temp', '-k', action='store_true', default=False, help='keep temp files (e.g qml.js)')
parser.add_argument('--web-prefix', '-p', action='store_true', default=False, help='web prefix for hybrid sites/apps')
parser.add_argument('--update-translation', '-u', action='store_true', default=False, help='update translation only')
parser.add_argument('--boilerplate', action='store_true', default = False, help = 'create simple skeleton project')
parser.add_argument('--doc', '-D', help='generate documentation in given directory')
parser.add_argument('--doc-format', '-Df', help='documentation format ("qml", "md" or "json")')
parser.add_argument('--release', '-r', help='generate release code (no logs)', default = False, action = 'store_true')
parser.add_argument('--verbose', '-v', help='adds verbosity in some places', dest='verbose', default=False, action='store_true')
parser.add_argument('targets', nargs='*', help='targets to build')
args = parser.parse_args()

root = os.path.dirname(sys.argv[0])

if args.boilerplate:
	if path.exists('.manifest') or path.exists('app.qml'):
		print 'ERROR: will not overwrite any file, you already have your project set up, run ./qmlcore/build'
		sys.exit(1)
	with open('.manifest', 'w') as f:
		f.write("{ }\n")
	with open('app.qml', 'w') as app:
		with open(path.join(root, 'app.qml')) as template:
			app.write(template.read())
	print 'finished, run ./qmlcore/build now'
	sys.exit(0)

def call(*args, **kw):
	if os.name == 'nt':
		cmd = ['cmd', '/c'] +  list(args)[0]
		code = subprocess.call(cmd)
	else:
		code = subprocess.call(*args, **kw)
		if code != 0:
			raise Exception('command %s failed with code %d' %(" ".join(*args), code))

def minify_uglify(out, src, root, app, platform, manifest):
	call(["uglifyjs",
		src,
		"-c",
		"-m"
		], stdout = out)

def minify_gcc(out, src, root, app, platform, manifest):
	call(["java", "-jar", path.join(root, "compiler/gcc/compiler.jar"),
		"--warning_level", "VERBOSE",
		"--externs", path.join(root, "compiler/gcc/jquery-1.9.js"),
		"--process_jquery_primitives",
		"--jscomp_off=missingProperties",
		src], stdout = out)

def minify(root, app, platform, manifest):
	src = path.join(".app." + platform, "qml.%s.js" % app)
	dstname = "qml.%s.min.js" %app
	tool = manifest.minify
	if isinstance(tool, bool):
		tool = 'uglify-js'

	with open(path.join(".app." + platform, dstname), "w") as out:
		if tool == 'uglify-js':
			try:
				minify_uglify(out, src, root, app, platform, manifest)
			except:
				print "WARNING: you don't seem to have uglifyjs installed. please run `sudo npm install -g uglify-js`, falling back to gcc"
				tool = 'gcc'

		if tool == 'gcc':
			minify_gcc(out, src, root, app, platform, manifest)

	if not args.keep_temp:
		os.remove(src)
	return dstname

var_re = re.compile(r'{{([\w\.]+)}}', re.MULTILINE)
block_re = re.compile(r'{%.*?%}', re.MULTILINE | re.IGNORECASE)

def process_template_simple(destination, source, context):
	_head, name = path.split(source)
	destination = path.join(destination, context['html'] + '.html')
	with open(destination, 'wb') as fd, open(source) as fs:
		data = fs.read()
		data = var_re.sub(lambda x: context.get(x.group(1), ''), data)
		data = block_re.sub('', data)
		fd.write(data)

def process_template_jinja2(destination, source, context):
	from jinja2 import Environment, FileSystemLoader
	src, name = path.split(source)
	env = Environment(loader=FileSystemLoader(context['template_path']))
	template = env.get_template(name)
	destination = path.join(destination, context['html'] + '.html')
	with open(destination, 'w') as fd:
		fd.write(template.render(**context).encode('utf-8'))

def process_template(destination, source, context):
	t = context['templater']
	if t == 'simple':
		process_template_simple(destination, source, context)
	elif t == 'jinja2':
		process_template_jinja2(destination, source, context)
	else:
		raise Exception('unknown templater used: %s' %t)

def copy(source, destination, context):
	if not path.isdir(source):
		return
	files = [path.join(source, file_) for file_ in os.listdir(source)]
	copytree(source, destination)
	for src in files:
		_path, name = path.split(src)
		if name == 'index.html':
			process_template(destination, src, context)
		else:
			name, ext = path.splitext(name)
			if ext == '.html':
				if context['html'] == name:
					process_template(destination, src, context)
				else:
					if name not in context['apps']: #skip templates used for another apps.
						shutil.copy2(src, destination)

def find_platform_path(root, platform):
	platform_path = path.join(root, 'platform', platform)
	if path.exists(platform_path):
		return platform_path

	plugins_root = path.normpath(path.join(root, '..'))
	for dir in os.listdir(plugins_root): #fixme: optimize me
		if dir.startswith('qmlcore-'):
			platform_path = path.join(plugins_root, dir, 'platform', platform)
			if path.exists(platform_path):
				return platform_path
	raise Exception("no platform '%s' found" %platform)


def copytree(src, dst, symlinks=False, ignore=None):
	for item in os.listdir(src):
		s = os.path.join(src, item)
		d = os.path.join(dst, item)
		if os.path.isdir(s):
			distutils.dir_util.copy_tree(s, d)
		else:
			shutil.copy2(s, d)

def build(root, platform, app, html, manifest):
	print "building %s for %s..." %(app, platform)
	target = '.app.' + platform

	try:
		os.mkdir(target)
	except:
		pass

	platform_path = find_platform_path(root, platform)

	try:
		with open(path.join(platform_path, '.manifest')) as f:
			platform_manifest = mf.load(f)
	except:
		platform_manifest = mf.Manifest()

	if not platform_manifest.standalone:
		raise Exception('%s is not a standalone platform' %platform)

	paths = manifest.path

	options = ['-o', target, path.join(root, 'core'), platform_path]
	options.extend(paths)

	for subplatform in platform_manifest.requires: #fixme: no recursive processing
		subplatform_path = find_platform_path(root, subplatform)
		options.append(subplatform_path)

	options.extend(['.', '-a', app])

	if args.release:
		options.insert(0, '-r')

	if args.devel:
		options.insert(0, '-w')

	if args.doc:
		options.extend(['-D', args.doc])

	if args.doc_format:
		options.extend(['-Df', args.doc_format])

	if not (platform_manifest.strict and manifest.strict):
		options.insert(0, '-S')

	if args.web_prefix or manifest.web_prefix:
		options.insert(0, '-p')

	if args.verbose:
		options.insert(0, '-v')

	if os.name == 'nt':
		call(['python.exe', path.join(root, 'qml-compiler')] + options)
	else:
		call([path.join(root, 'qml-compiler')] + options)
	script = 'qml.%s.js' %app #fixme

	if args.minify or manifest.minify:
		script = minify(root, app, platform, manifest)
	templater = manifest.templater

	if args.verbose:
		print "copying resources..."
	context = { 'id': app, 'app': script, 'html': html, 'templater': templater, 'apps': set(manifest.apps.itervalues() if manifest.apps else {app: 'index'}) }

	copy(path.join(root, 'dist'), target, context)

	template_path = []

	for subplatform in platform_manifest.requires: #fixme: no recursive processing
		subplatform_path = find_platform_path(root, subplatform)
		platform_dist = path.join(subplatform_path, 'dist')
		if path.isdir(platform_dist):
			template_path.append(platform_dist)

	platform_dist = path.join(platform_path, 'dist')
	if path.isdir(platform_dist):
		template_path.append(platform_dist)

	project_dist = path.join(os.getcwd(), 'dist')
	if path.isdir(project_dist):
		template_path.append(project_dist)

	context['template_path'] = template_path
	for dist in template_path:
		copy(dist, target, context)

try:
	with open('.manifest') as f:
		manifest = mf.load(f)
except IOError:
	print '.manifest file read error, using empty fallback'
	manifest = mf.loads("{ }\n")

apps = manifest.apps
if not apps:
	apps = {'app': 'index' }

if args.update_translation:
	languages = manifest.languages
	for language in languages:
		print 'updating translation for language', language
		call([os.path.join(root, 'update-ts'), '--ts', language + '.ts', '.'])
	sys.exit(0)

platforms = manifest.platforms
if not platforms:
	platforms = ['web']

targets = set(args.targets)

try:
	for platform in platforms:
		for app in apps:
			if len(targets) > 0 and app not in targets:
				continue
			html = apps[app]
			build(root, platform, app, html, manifest)
except Exception as ex:
	print "ERROR:", ex
	if args.verbose:
		raise
	else:
		sys.exit(1)
